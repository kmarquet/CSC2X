===Title
Human-Computer Interaction

===Intro
Human-computer interaction (HCI) is concerned with designing interactions between human
activities and the computational systems that support them, and with constructing interfaces to
afford those interactions.
Interaction between users and computational artefacts occurs at an interface that includes both
software and hardware. Thus interface design impacts the software life-cycle in that it should
occur early; the design and implementation of core functionality can influence the user interface
– for better or worse.
Because it deals with people as well as computational systems, as a knowledge area HCI
demands the consideration of cultural, social, organizational, cognitive and perceptual issues.
Consequently it draws on a variety of disciplinary traditions, including psychology, ergonomics,
computer science, graphic and product design, anthropology and engineering.

=====Foundations
==Intro
Motivation: For end-users, the interface is the system. So design in this domain must be
interaction-focused and human-centered. Students need a different repertoire of techniques to
address this than is provided elsewhere in the curriculum.

==Topics
Contexts for HCI (anything with a user interface, e.g., webpage, business applications, mobile applications, and games)
Processes for user-centered development, e.g., early focus on users, empirical testing, iterative design
Different measures for evaluation, e.g., utility, efficiency, learnability, user satisfaction
Usability heuristics and the principles of usability testing
Physical capabilities that inform interaction design, e.g., color perception, ergonomics
Cognitive models that inform interaction design, e.g., attention, perception and recognition, movement, and memory; gulfs of expectation and execution
Social models that inform interaction design, e.g., culture, communication, networks and organizations
Principles of good design and good designers; engineering tradeoffs
Accessibility, e.g., interfaces for differently-abled populations (e.g., blind, motion-impaired)
Interfaces for differently-aged population groups (e.g., children, 80+)

==Skills
Discuss why human-centered software development is important. [Familiarity]
Summarize the basic precepts of psychological and social interaction. [Familiarity]
Develop and use a conceptual vocabulary for analyzing human interaction with software: affordance,
conceptual model, feedback, and so forth. [Usage]
Define a user-centered design process that explicitly takes account of the fact that the user is not like the developer or their acquaintances. [Usage]
Create and conduct a simple usability test for an existing software application. [Assessment]

=====Designing Interaction
==Intro
Motivation: CS students need a minimal set of well-established methods and tools to bring to
interface construction.

==Topics
Principles of graphical user interfaces (GUIs)
Elements of visual design (layout, color, fonts, labeling)
Task analysis, including qualitative aspects of generating task analytic models
Low-fidelity (paper) prototyping
Quantitative evaluation techniques, e.g., keystroke-level evaluation
Help and documentation
Handling human/system failure
User interface standards

==Skills
For an identified user group, undertake and document an analysis of their needs. [Assessment]
Create a simple application, together with help and documentation, that supports a graphical user
interface. [Usage]
Conduct a quantitative evaluation and discuss/report the results. [Usage]
Discuss at least one national or international user interface design standard. [Familiarity]

=====Programming Interactive Systems
==Intro
Motivation: To take a user-experience-centered view of software development and then cover
approaches and technologies to make that happen.

==Topics
Software Architecture Patterns, e.g., Model-View controller; command objects, online, offline (cross-reference {PL/Event Driven}, {PL/Reactive Programming}, where MVC is used in the context of event-driven programming)
Interaction Design Patterns: visual hierarchy, navigational distance
Event management and user interaction
Geometry management (cross-reference GV/Geometric Modelling)
Choosing interaction styles and interaction techniques
Presenting information: navigation, representation, manipulation
Interface animation techniques (e.g., scene graphs)
Widget classes and libraries
Modern GUI libraries (e.g. iOS, Android, JavaFX) GUI builders and UI programming environments (cross-reference {PBD/Mobile Platforms})
Declarative Interface Specification: Stylesheets and DOMs
Data-driven applications (database-backed web pages)
Cross-platform design
Design for resource-constrained devices (e.g. small, mobile devices)

==Skills
Explain the importance of Model-View controller to interface programming. [Familiarity]
Create an application with a modern graphical user interface. [Usage]
Identify commonalities and differences in UIs across different platforms. [Familiarity]
Explain and use GUI programming concepts: event handling, constraint-based layout management, etc.
[Familiarity]

=====User-Centered Design and Testing
==Intro
Motivation: An exploration of techniques to ensure that end-users are fully considered at all
stages of the design process, from inception to implementation.

==Topics
Approaches to, and characteristics of, the design process
Functionality and usability requirements (cross-reference {SE/Requirements Engineering})
Techniques for gathering requirements, e.g., interviews, surveys, ethnographic and contextual enquiry
Techniques and tools for the analysis and presentation of requirements, e.g., reports, personas
Prototyping techniques and tools, e.g., sketching, storyboards, low-fidelity prototyping, wireframes
Evaluation without users, using both qualitative and quantitative techniques, e.g., walkthroughs, GOMS,
expert-based analysis, heuristics, guidelines, and standards
Evaluation with users, e.g., observation, think-aloud, interview, survey, experiment
Challenges to effective evaluation, e.g., sampling, generalization
Reporting the results of evaluations
Internationalization, designing for users from other cultures, cross-cultural

==Skills
Explain how user-centered design complements other software process models. [Familiarity]
Use lo-fi (low fidelity) prototyping techniques to gather, and report, user responses. [Usage]
Choose appropriate methods to support the development of a specific UI. [Assessment]
Use a variety of techniques to evaluate a given UI. [Assessment]
Compare the constraints and benefits of different evaluative methods. [Assessment]

=====New Interactive Technologies
==Intro
Motivation: As technologies evolve, new interaction styles are made possible. This knowledge
unit should be considered extensible, to track emergent technology.

==Topics
Choosing interaction styles and interaction techniques
Representing information to users: navigation, representation, manipulation
Approaches to design, implementation and evaluation of non-mouse interaction
o Touch and multi-touch interfaces
o Shared, embodied, and large interfaces
o New input modalities (such as sensor and location data)
o New Windows, e.g., iPhone, Android
o Speech recognition and natural language processing (cross reference {IS/Natural Language Processing})
o Wearable and tangible interfaces
o Persuasive interaction and emotion
o Ubiquitous and context-aware interaction technologies (Ubicomp)
o Bayesian inference (e.g. predictive text, guided pointing)
o Ambient/peripheral display and interaction

==Skills
Describe when non-mouse interfaces are appropriate. [Familiarity]
Understand the interaction possibilities beyond mouse-and-pointer interfaces. [Familiarity]
Discuss the advantages (and disadvantages) of non-mouse interfaces. [Assessment]

=====Collaboration and Communication
==Intro
Motivation: Computer interfaces not only support users in achieving their individual goals but
also in their interaction with others, whether that is task-focused (work or gaming) or task-
unfocused (social networking).

==Topics
Asynchronous group communication, e.g., e-mail, forums, social networks
Synchronous group communication, e.g., chat rooms, conferencing, online games
Social media, social computing, and social network analysis
Online collaboration, 'smart' spaces, and social coordination aspects of workflow technologies
Online communities
Software characters and intelligent agents, virtual worlds and avatars (cross-reference {IS/Agents})
Social psychology

==Skills
Describe the difference between synchronous and asynchronous communication. [Familiarity]
Compare the HCI issues in individual interaction with group interaction. [Assessment]
Discuss several issues of social concern raised by collaborative software. [Familiarity]
Discuss the HCI issues in software that embodies human intention. [Familiarity]

=====Statistical Methods for HCI
==Intro
Motivation: Much HCI work depends on the proper use, understanding and application of
statistics. This knowledge is often held by students who join the field from psychology, but less
common in students with a CS background.

==Topics
t-tests
ANOVA
Randomization (non-parametric) testing, within vs. between-subjects design
Calculating effect size
Exploratory data analysis
Presenting statistical data
Combining qualitative and quantitative results

==Skills
Explain basic statistical concepts and their areas of application. [Familiarity]
Extract and articulate the statistical arguments used in papers that quantitatively report user studies.
[Usage]
Design a user study that will yield quantitative results. [Usage]
Conduct and report on a study that utilizes both qualitative and quantitative evaluation. [Usage]

=====Human Factors and Security
==Intro
Motivation: Effective interface design requires basic knowledge of security psychology. Many
attacks do not have a technological basis, but exploit human propensities and vulnerabilities.
“Only amateurs attack machines; professionals target people” (Bruce Schneier,
https://www.schneier.com/blog/archives/2013/03/phishing_has_go.h.)

==Topics
Applied psychology and security policies
Security economics
Regulatory environments – responsibility, liability and self-determination
Organizational vulnerabilities and threats
Usability design and security
Pretext, impersonation and fraud, e.g., phishing and spear phishing (cross-reference {IAS/Threats and Attacks})
Trust, privacy and deception
Biometric authentication (camera, voice)
Identity management

==Skills
Explain the concepts of phishing and spear phishing, and how to recognize them. [Familiarity]
Describe the issues of trust in interface design with an example of a high and low trust system.
[Assessment]
Design a user interface for a security mechanism. [Assessment]
Explain the concept of identity management and its importance. [Familiarity]
Analyze a security policy and/or procedures to show where they consider, or fail to consider, human
factors. [Usage]

=====Design-Oriented HCI
==Intro
Motivation: Some curricula will want to emphasize an understanding of the norms and values of
HCI work itself as emerging from, and deployed within specific historical, disciplinary and
cultural contexts.

==Topics
Intellectual styles and perspectives to technology and its interfaces
Consideration of HCI as a design discipline
o Sketching
o Participatory design
Critically reflective HCI
o Critical technical practice
o Technologies for political activism
o Philosophy of user experience
o Ethnography and ethnomethodology
Indicative domains of application
o Sustainability
o Arts-informed computing

==Skills
Explain what is meant by “HCI is a design-oriented discipline”. [Familiarity]
Detail the processes of design appropriate to specific design orientations. [Familiarity]
Apply a variety of design methods to a given problem. [Usage]

=====Mixed, Augmented and Virtual Reality
==Intro
Motivation: A detailed consideration of the interface components required for the creation and
development of immersive environments, especially games.

==Topics
Output
o Sound
o Stereoscopic display
o Force feedback simulation, haptic devices
User input
o Viewer and object tracking
o Pose and gesture recognition
o Accelerometers
o Fiducial markers
o User interface issues
Physical modelling and rendering
o Physical simulation: collision detection & response, animation
o Visibility computation
o Time-critical rendering, multiple levels of details (LOD)
System architectures
Game engines
o Mobile augmented reality
o Flight simulators
o CAVEs
o Medical imaging
Networking
o p2p, client-server, dead reckoning, encryption, synchronization
o Distributed collaboration

==Skills
Describe the optical model realized by a computer graphics system to synthesize stereoscopic view.
[Familiarity]
Describe the principles of different viewer tracking technologies. [Familiarity]
Describe the differences between geometry- and image-based virtual reality. [Familiarity]
Describe the issues of user action synchronization and data consistency in a networked environment.
[Familiarity]
Determine the basic requirements on interface, hardware, and software configurations of a VR system for a
specified application. [Usage]
Describe several possible uses for games engines, including their potential and their limitations.
[Familiarity]
