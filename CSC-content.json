[{"area_name": "PD",
  "units": [
      {"unit_name": "Parallel_Architecture",
       "topics": [
         { "content": "Multicore processors",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Shared vs. distributed memory",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Symmetric multiprocessing (SMP)",
           "num": "2",
           "addressed": "No"
         },
         { "content": "SIMD, vector processing",
           "num": "3",
           "addressed": "No"
         },
         { "content": "GPU, co-processing",
           "num": "4",
           "addressed": "No"
         },
         { "content": "Flynn's taxonomy",
           "num": "5",
           "addressed": "No"
         },
         { "content": "Instruction level support for parallel programming",
           "num": "6",
           "subtopics": [         { "content": "Atomic instructions such as Compare and Set",
           "num": "60",
           "addressed": "No"
         }],
           "addressed": "No"
         },
         { "content": "Memory issues",
           "num": "7",
           "subtopics": [         { "content": "Multiprocessor caches and cache coherence o",
           "num": "70",
           "addressed": "No"
         }, 
         { "content": "Non-uniform memory access (NUMA)",
           "num": "71",
           "addressed": "No"
         }],
           "addressed": "No"
         },
         { "content": "Topologie",
           "num": "8",
           "subtopics": [         { "content": "Interconnects",
           "num": "80",
           "addressed": "No"
         }, 
         { "content": "Clusters",
           "num": "81",
           "addressed": "No"
         }, 
         { "content": "Resource sharing (e.g., buses and interconnects)",
           "num": "82",
           "addressed": "No"
         }],
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Explain the differences between shared and distributed memory",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Describe the SMP architecture and note its key features",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Characterize the kinds of tasks that are a natural match for SIMD machines",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Describe the advantages and limitations of GPUs vs. CPUs",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Explain the features of each classification in Flynn's taxonomy",
           "mastery": "-",
           "num": "5"
         },
         {"content": "Describe assembly-level support for atomic operations.",
           "mastery": "-",
           "num": "6"
         },
         {"content": "Describe the challenges in maintaining cache coherence",
           "mastery": "-",
           "num": "7"
         },
         {"content": "Describe the key performance challenges in different memory and distributed system topologies.",
           "mastery": "-",
           "num": "8"
         }
      ]}
      ,
      {"unit_name": "Parallel_Performance",
       "topics": [
         { "content": "Load balancing",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Performance measurement",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Scheduling and contention (cross-reference OS/Scheduling and Dispatch)",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Evaluating communication overhead",
           "num": "3",
           "addressed": "No"
         },
         { "content": "Data management",
           "num": "4",
           "subtopics": [         { "content": "Non-uniform communication costs due to proximity (cross-reference SF/Proximity)",
           "num": "40",
           "addressed": "No"
         }, 
         { "content": "Cache effects (e.g., false sharing)",
           "num": "41",
           "addressed": "No"
         }, 
         { "content": "Maintaining spatial locality",
           "num": "42",
           "addressed": "No"
         }],
           "addressed": "No"
         },
         { "content": "Power usage and management",
           "num": "5",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Detect and correct a load imbalance",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Calculate the implications of Amdahl's law for a particular parallel algorithm (cross-reference",
           "mastery": "-",
           "num": "2"
         },
         {"content": "SF/Evaluation for Amdahl’s Law).",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Describe how data distribution/layout can affect an algorithm’s communication costs.",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Detect and correct an instance of false sharing.",
           "mastery": "-",
           "num": "5"
         },
         {"content": "Explain the impact of scheduling on parallel performance.",
           "mastery": "-",
           "num": "6"
         },
         {"content": "Explain performance impacts of data locality.",
           "mastery": "-",
           "num": "7"
         },
         {"content": "Explain the impact and trade-off related to power usage on parallel performance.",
           "mastery": "-",
           "num": "8"
         }
      ]}
      ,
      {"unit_name": "Parallel_Fundamentals",
       "topics": [
         { "content": "Multiple simultaneous computations",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Goals of parallelism (e.g., throughput) versus concurrency (e.g., controlling access to shared resources)",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Parallelism, communication, and coordination",
           "num": "2",
           "subtopics": [         { "content": "Programming constructs for coordinating multiple simultaneous computations",
           "num": "20",
           "addressed": "No"
         }, 
         { "content": "Need for synchronization",
           "num": "21",
           "addressed": "No"
         }],
           "addressed": "No"
         },
         { "content": "Programming errors not found in sequential programming",
           "num": "3",
           "subtopics": [         { "content": "Data races (simultaneous read/write or write/write of shared state)",
           "num": "30",
           "addressed": "No"
         }, 
         { "content": "Higher-level races (interleavings violating program intention, undesired non-determinism)",
           "num": "31",
           "addressed": "No"
         }, 
         { "content": "Lack of liveness/progress (deadlock, starvation)",
           "num": "32",
           "addressed": "No"
         }],
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Distinguish using computational resources for a faster answer from managing efficient access to a shared resource. (Cross-reference GV/Fundamental Concepts, outcome 5.)",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Distinguish multiple sufficient programming constructs for synchronization that may be inter- implementable but have complementary advantages.",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Distinguish data races from higher level races.",
           "mastery": "-",
           "num": "3"
         }
      ]}
      ,
      {"unit_name": "Cloud_Computing",
       "topics": [
         { "content": "Internet-Scale computing",
           "num": "0",
           "subtopics": [         { "content": "Task partitioning (cross-reference PD/Parallel Algorithms, Analysis, and Programming)",
           "num": "0",
           "addressed": "No"
         }, 
         { "content": "Data access",
           "num": "1",
           "addressed": "No"
         }, 
         { "content": "Clusters, grids, and meshes",
           "num": "2",
           "addressed": "No"
         }],
           "addressed": "No"
         },
         { "content": "Cloud services",
           "num": "1",
           "subtopics": [         { "content": "Infrastructure as a service - Elasticity of resources, Platform APIs",
           "num": "10",
           "addressed": "No"
         }, 
         { "content": "Software as a service",
           "num": "11",
           "addressed": "No"
         }, 
         { "content": "Security",
           "num": "12",
           "addressed": "No"
         }, 
         { "content": "Cost management",
           "num": "13",
           "addressed": "No"
         }],
           "addressed": "No"
         },
         { "content": "Virtualization (cross-reference SF/Virtualization and Isolation and OS/Virtual Machines)",
           "num": "2",
           "subtopics": [         { "content": "Shared resource management",
           "num": "20",
           "addressed": "No"
         }, 
         { "content": "Migration of processes",
           "num": "21",
           "addressed": "No"
         }],
           "addressed": "No"
         },
         { "content": "Cloud-based data storage",
           "num": "3",
           "subtopics": [         { "content": "Shared access to weakly consistent data stores",
           "num": "30",
           "addressed": "No"
         }, 
         { "content": "Data synchronization",
           "num": "31",
           "addressed": "No"
         }, 
         { "content": "Data partitioning",
           "num": "32",
           "addressed": "No"
         }, 
         { "content": "Distributed file systems (cross-reference IM/Distributed Databases)",
           "num": "33",
           "addressed": "No"
         }, 
         { "content": "Replication",
           "num": "34",
           "addressed": "No"
         }],
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Discuss the importance of elasticity and resource management in cloud computing.",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Explain strategies to synchronize a common view of shared data across a collection of devices.",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Explain the advantages and disadvantages of using virtualized infrastructure.",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Deploy an application that uses cloud infrastructure for computing and/or data resources.",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Appropriately partition an application between a client and resources.",
           "mastery": "-",
           "num": "5"
         }
      ]}
      ,
      {"unit_name": "Formal_Models_and_Semantics",
       "topics": [
         { "content": "Formal models of processes and message passing, including algebras such as Communicating Sequential Processes (CSP) and pi-calculus",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Formal models of parallel computation, including the Parallel Random Access Machine (PRAM) and alternatives such as Bulk Synchronous Parallel (BSP)",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Formal models of computational dependencies",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Models of (relaxed) shared memory consistency and their relation to programming language specifications",
           "num": "3",
           "addressed": "No"
         },
         { "content": "Algorithmic correctness criteria including linearizability",
           "num": "4",
           "addressed": "No"
         },
         { "content": "Models of algorithmic progress, including non-blocking guarantees and fairness",
           "num": "5",
           "addressed": "No"
         },
         { "content": "Techniques for specifying and checking correctness properties such as atomicity and freedom from data race",
           "num": "6",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Model a concurrent process using a formal model, such as pi-calculus.",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Explain the characteristics of a particular formal parallel model.",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Formally model a shared memory system to show if it is consistent.",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Use a model to show progress guarantees in a parallel algorithm.",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Use formal techniques to show that a parallel algorithm is correct with respect to a safety or liveness property.",
           "mastery": "-",
           "num": "5"
         },
         {"content": "Decide if a specific execution is linearizable or not.",
           "mastery": "-",
           "num": "6"
         }
      ]}
      ,
      {"unit_name": "Communication_and_Coordination",
       "topics": [
         { "content": "Shared Memory",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Consistency in shared memory models",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Message passing - Blocking versus non-blocking styles for sending and receiving messages",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Message passing - Message buffering (cross-reference PF/Fundamental Data Structures/Queues)",
           "num": "3",
           "addressed": "No"
         },
         { "content": "Atomicity",
           "num": "4",
           "subtopics": [         { "content": "Granularity of atomic accesses and updates, and the use of constructs such as critical sections or transactions to describe them",
           "num": "40",
           "addressed": "No"
         }, 
         { "content": "Mutual Exclusion using locks, semaphores, monitors, or related constructs",
           "num": "41",
           "addressed": "No"
         }],
           "addressed": "No"
         },
         { "content": "Potential for liveness failures and deadlock (causes, conditions, prevention)",
           "num": "5",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Use mutual exclusion to avoid a given race condition",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Give an example of an ordering of accesses among concurrent activities that is not sequentially consistent",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Give an example of a scenario in which blocking message sends can deadlock",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Explain when and why multicast or event-based messaging can be preferable to alternatives",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Write a program that correctly terminates when all of a set of concurrent tasks have completed",
           "mastery": "-",
           "num": "5"
         },
         {"content": "Use a properly synchronized queue to buffer data passed among activities",
           "mastery": "-",
           "num": "6"
         },
         {"content": "Explain why checks for preconditions, and actions based on these checks, must share the same unit of atomicity to be effective",
           "mastery": "-",
           "num": "7"
         },
         {"content": "Write a test program that can reveal a concurrent programming error; for example, missing an update when two activities both try to increment a variable",
           "mastery": "-",
           "num": "8"
         },
         {"content": "Describe at least one design technique for avoiding liveness failures in programs using multiple locks or semaphores",
           "mastery": "-",
           "num": "9"
         },
         {"content": "Describe the relative merits of optimistic versus conservative concurrency control under different rates of contention among updates",
           "mastery": "-",
           "num": "10"
         },
         {"content": "Give an example of a scenario in which an attempted optimistic update may never complete",
           "mastery": "-",
           "num": "11"
         }
      ]}
      ,
      {"unit_name": "Distributed_Systems",
       "topics": [
         { "content": "Faults (cross-reference OS/Fault Tolerance)",
           "num": "0",
           "subtopics": [         { "content": "Network-based (including partitions) and node-based failures",
           "num": "0",
           "addressed": "No"
         }, 
         { "content": "Impact on system-wide guarantees (e.g., availability)",
           "num": "1",
           "addressed": "No"
         }],
           "addressed": "No"
         },
         { "content": "Distributed message sending",
           "num": "1",
           "subtopics": [         { "content": "Data conversion and transmission",
           "num": "10",
           "addressed": "No"
         }, 
         { "content": "Sockets",
           "num": "11",
           "addressed": "No"
         }, 
         { "content": "Message sequencing",
           "num": "12",
           "addressed": "No"
         }, 
         { "content": "Buffering, retrying, and dropping messages",
           "num": "13",
           "addressed": "No"
         }],
           "addressed": "No"
         },
         { "content": "Distributed system design tradeoffs",
           "num": "2",
           "subtopics": [         { "content": "Latency versus throughput",
           "num": "20",
           "addressed": "No"
         }, 
         { "content": "Consistency, availability, partition tolerance",
           "num": "21",
           "addressed": "No"
         }],
           "addressed": "No"
         },
         { "content": "Distributed service design",
           "num": "3",
           "subtopics": [         { "content": "Stateful versus stateless protocols and services",
           "num": "30",
           "addressed": "No"
         }, 
         { "content": "Session (connection-based) designs",
           "num": "31",
           "addressed": "No"
         }, 
         { "content": "Reactive (IO-triggered) and multithreaded designs",
           "num": "32",
           "addressed": "No"
         }],
           "addressed": "No"
         },
         { "content": "Core distributed algorithms",
           "num": "4",
           "subtopics": [         { "content": "Election, discovery",
           "num": "40",
           "addressed": "No"
         }],
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Distinguish network faults from other kinds of failures.",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Explain why synchronization constructs such as simple locks are not useful in the presence of distributed faults.",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Write a program that performs any required marshaling and conversion into message units, such as packets, to communicate interesting data between two hosts.",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Measure the observed throughput and response latency across hosts in a given network.",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Explain why no distributed system can be simultaneously consistent, available, and partition tolerant.",
           "mastery": "-",
           "num": "5"
         },
         {"content": "Implement a simple server -- for example, a spell checking service.",
           "mastery": "-",
           "num": "6"
         },
         {"content": "Explain the tradeoffs among overhead, scalability, and fault tolerance when choosing a stateful v. stateless design for a given service.",
           "mastery": "-",
           "num": "7"
         },
         {"content": "Describe the scalability challenges associated with a service growing to accommodate many clients, as well as those associated with a service only transiently having many clients.",
           "mastery": "-",
           "num": "8"
         },
         {"content": "Give examples of problems for which consensus algorithms such as leader election are required.",
           "mastery": "-",
           "num": "9"
         }
      ]}
      ,
      {"unit_name": "Parallel_Algorithms_Analysis_and_Programming",
       "topics": [
         { "content": "Critical paths, work and span, and the relation to Amdahl's law (cross-reference SF/Performance)",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Speed-up and scalability",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Naturally (embarrassingly) parallel algorithms",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Parallel algorithmic patterns (divide-and-conquer, map and reduce, master-workers, others)",
           "num": "3",
           "addressed": "No"
         },
         { "content": "Specific algorithms (e.g., parallel MergeSort)",
           "num": "4",
           "addressed": "No"
         },
         { "content": "Parallel graph algorithms (e.g., parallel shortest path, parallel spanning tree) (cross-reference AL/Algorithmic Strategies/Divide-and-conquer)",
           "num": "5",
           "addressed": "No"
         },
         { "content": "Parallel matrix computations",
           "num": "6",
           "addressed": "No"
         },
         { "content": "Producer-consumer and pipelined algorithms",
           "num": "7",
           "addressed": "No"
         },
         { "content": "Examples of non-scalable parallel algorithms",
           "num": "8",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Define 'critical path', 'work', and 'span'.",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Compute the work and span, and determine the critical path with respect to a parallel execution diagram.",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Define 'speed-up' and explain the notion of an algorithm’s scalability in this regard.",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Identify independent tasks in a program that may be parallelized.",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Characterize features of a workload that allow or prevent it from being naturally parallelized.",
           "mastery": "-",
           "num": "5"
         },
         {"content": "Implement a parallel divide-and-conquer (and/or graph algorithm) and empirically measure its performance relative to its sequential analog.",
           "mastery": "-",
           "num": "6"
         },
         {"content": "Decompose a problem (e.g., counting the number of occurrences of some word in a document) via map and reduce operations.",
           "mastery": "-",
           "num": "7"
         },
         {"content": "Provide an example of a problem that fits the producer-consumer paradigm",
           "mastery": "-",
           "num": "8"
         },
         {"content": "Give examples of problems where pipelining would be an effective means of parallelization",
           "mastery": "-",
           "num": "9"
         },
         {"content": "Implement a parallel matrix algorithm",
           "mastery": "-",
           "num": "10"
         },
         {"content": "Identify issues that arise in producer-consumer algorithms and mechanisms that may be used for addressing them",
           "mastery": "-",
           "num": "11"
         }
      ]}
      ,
      {"unit_name": "Parallel_Decomposition",
       "topics": [
         { "content": "Need for communication and coordination/synchronization",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Independence and partitioning",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Basic knowledge of parallel decomposition concepts (cross-reference SF/System Support for Parallelism)",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Task-based decomposition: Implementation strategies such as threads",
           "num": "3",
           "addressed": "No"
         },
         { "content": "Data-parallel decomposition: Strategies such as SIMD and MapReduce",
           "num": "4",
           "addressed": "No"
         },
         { "content": "Actors and reactive processes (e.g., request handlers)",
           "num": "5",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Explain why synchronization is necessary in a specific parallel program",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Identify opportunities to partition a serial program into independent parallel modules.",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Write a correct and scalable parallel algorithm. [Usage]",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Parallelize an algorithm by applying task-based decomposition",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Parallelize an algorithm by applying data-parallel decomposition",
           "mastery": "-",
           "num": "5"
         },
         {"content": "Write a program using actors and/or reactive processes",
           "mastery": "-",
           "num": "6"
         }
      ]}
]},
{"area_name": "SDF",
  "units": [
      {"unit_name": "Development_Methods",
       "topics": [
         { "content": "Program comprehension",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Program correctness",
           "num": "1",
           "subtopics": [         { "content": "Types of errors (syntax, logic, run-time)",
           "num": "10",
           "addressed": "No"
         }, 
         { "content": "The concept of a specification",
           "num": "11",
           "addressed": "No"
         }, 
         { "content": "Defensive programming (e.g. secure coding, exception handling)",
           "num": "12",
           "addressed": "No"
         }, 
         { "content": "Code reviews",
           "num": "13",
           "addressed": "No"
         }, 
         { "content": "Testing fundamentals and test-case generation",
           "num": "14",
           "addressed": "No"
         }, 
         { "content": "The role and the use of contracts, including pre- and post-conditions",
           "num": "15",
           "addressed": "No"
         }, 
         { "content": "Unit testing",
           "num": "16",
           "addressed": "No"
         }],
           "addressed": "No"
         },
         { "content": "Simple refactoring",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Modern programming environments",
           "num": "3",
           "subtopics": [         { "content": "Code search",
           "num": "30",
           "addressed": "No"
         }, 
         { "content": "Programming using library components and their APIs",
           "num": "31",
           "addressed": "No"
         }],
           "addressed": "No"
         },
         { "content": "Debugging strategies",
           "num": "4",
           "addressed": "No"
         },
         { "content": "Documentation and program style",
           "num": "5",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Trace the execution of a variety of code segments and write summaries of their computations.",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Explain why the creation of correct program components is important in the production of high-quality software",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Identify common coding errors that lead to insecure programs (e.g., buffer overflows, memory leaks, malicious code) and apply strategies for avoiding such error",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Conduct a personal code review (focused on common coding errors) on a program component using a provided checklist",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Contribute to a small-team code review focused on component correctness.",
           "mastery": "-",
           "num": "5"
         },
         {"content": "Describe how a contract can be used to specify the behavior of a program component.",
           "mastery": "-",
           "num": "6"
         },
         {"content": "Refactor a program by identifying opportunities to apply procedural abstraction.",
           "mastery": "-",
           "num": "7"
         },
         {"content": "Apply a variety of strategies to the testing and debugging of simple programs.",
           "mastery": "-",
           "num": "8"
         },
         {"content": "Construct, execute and debug programs using a modern IDE and associated tools such as unit testing tools and visual debuggers",
           "mastery": "-",
           "num": "9"
         },
         {"content": "Construct and debug programs using the standard libraries available with a chosen programming language.",
           "mastery": "-",
           "num": "10"
         },
         {"content": "Analyze the extent to which another programmer’s code meets documentation and programming style standards.",
           "mastery": "-",
           "num": "11"
         },
         {"content": "Apply consistent documentation and program style standards that contribute to the readability and maintainability of software",
           "mastery": "-",
           "num": "12"
         }
      ]}
]},
{"area_name": "SF",
  "units": [
      {"unit_name": "Proximity",
       "topics": [
         { "content": "Speed of light and computers (one foot per nanosecond vs. one GHz clocks)",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Latencies in computer systems : memory vs. disk latencies vs. across the network memory",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Caches, spatial and temporal locality, in processors and systems",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Caches, cache coherency in database, operating systems, distributed systems, and computer architecture",
           "num": "3",
           "addressed": "No"
         },
         { "content": "Introduction into the processor memory hierarchy : registers and multi-level caches, and the formula for average memory access time",
           "num": "4",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Explain the importance of locality in determining performance.",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Describe why things that are close in space take less time to access.",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Calculate average memory access time and describe the tradeoffs in memory hierarchy performance in terms of capacity, miss/hit rate, and access time.",
           "mastery": "-",
           "num": "3"
         }
      ]}
      ,
      {"unit_name": "Resource_Allocation_and_Scheduling",
       "topics": [
         { "content": "Kinds of resources : processor share, memory, disk, net bandwidth",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Kinds of scheduling : first-come, priority",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Advantages of fair scheduling, preemptive scheduling",
           "num": "2",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Define how finite computer resources (e.g., processor share, memory, storage and network bandwidth) are managed by their careful allocation to existing entities",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Describe the scheduling algorithms by which resources are allocated to competing entities, and the figures of merit by which these algorithms are evaluated, such as fairness",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Implement simple schedule algorithms",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Measure figures of merit of alternative scheduler implementations",
           "mastery": "-",
           "num": "4"
         }
      ]}
      ,
      {"unit_name": "Computational_Paradigms",
       "topics": [
         { "content": "Basic building blocks and components of a computer (gates, flip-flops, registers, interconnections; Datapath + Control + Memory)",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Hardware as a computational paradigm: Fundamental logic building blocks (logic gates, flip-flops, counters, registers, PL); Logic expressions, minimization, sum of product forms",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Application-level sequential processing: single thread",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Simple application-level parallel processing: request level (web services/client-server/distributed), single thread per server, multiple threads with multiple servers",
           "num": "3",
           "addressed": "No"
         },
         { "content": "Basic concept of pipelining, overlapped processing stages",
           "num": "4",
           "addressed": "No"
         },
         { "content": "Basic concept of scaling: going faster vs. handling larger problems",
           "num": "5",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "List commonly encountered patterns of how computations are organized.",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Describe the basic building blocks of computers and their role in the historical development of computer architecture.",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Articulate the differences between single thread vs. multiple thread, single server vs. multiple server models, motivated by real world examples (e.g., cooking recipes, lines for multiple teller machines, couple shopping for food, wash-dry-fold, etc.).",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Articulate the concept of strong vs. weak scaling, i.e., how performance is affected by scale of problem vs. scale of resources to solve the problem. This can be motivated by the simple, real-world examples.",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Design a simple logic circuit using the fundamental building blocks of logic design.",
           "mastery": "-",
           "num": "5"
         },
         {"content": "Use tools for capture, synthesis, and simulation to evaluate a logic design.",
           "mastery": "-",
           "num": "6"
         },
         {"content": "Write a simple sequential problem and a simple parallel version of the same program.",
           "mastery": "-",
           "num": "7"
         },
         {"content": "Evaluate performance of simple sequential and parallel versions of a program with different problem sizes, and be able to describe the speed-ups achieved.",
           "mastery": "-",
           "num": "8"
         }
      ]}
      ,
      {"unit_name": "State_and_State_Machines",
       "topics": [
         { "content": "Digital vs. Analog/Discrete vs. Continuous Systems",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Simple logic gates, logical expressions, Boolean logic simplification",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Clocks, State, Sequencing",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Combinational Logic, Sequential Logic, Registers, Memories",
           "num": "3",
           "addressed": "No"
         },
         { "content": "Computers and Network Protocols as examples of State Machines",
           "num": "4",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Describe computations as a system with a known set of configurations, and a byproduct of the computation is to transition from one unique configuration (state) to another (state).",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Recognize the distinction between systems whose output is only a function of their input (Combinational) and those with memory/history (Sequential).",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Describe a computer as a state machine that interprets machine instructions.",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Explain how a program or network protocol can also be expressed as a state machine, and that alternative representations for the same computation can exist.",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Develop state machine descriptions for simple problem statement solutions (e.g., traffic light sequencing, pattern recognizers).",
           "mastery": "-",
           "num": "5"
         },
         {"content": "Derive time-series behavior of a state machine from its state machine representation.",
           "mastery": "-",
           "num": "6"
         }
      ]}
      ,
      {"unit_name": "Cross",
       "topics": [
         { "content": "Programming abstractions, interfaces, use of libraries",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Distinction between Application and OS services, Remote Procedure Call",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Application-Virtual Machine Interaction",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Reliability",
           "num": "3",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Describe how computing systems are constructed of layers upon layers, based on separation of concerns, with well-defined interfaces, hiding details of low layers from the higher layers. This can be motivated by real-world systems, like how a car works, or libraries.",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Recognize that hardware, VM, OS, application are additional layers of interpretation/processing.",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Describe the mechanisms of how errors are detected, signaled back, and handled through the layers.",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Construct a simple program using methods of layering, error detection and recovery, and reflection of error status across layers.",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Find bugs in a layered program by using tools for program tracing, single stepping, and debugging.",
           "mastery": "-",
           "num": "5"
         }
      ]}
      ,
      {"unit_name": "Evaluation",
       "topics": [
         { "content": "Choosing and understanding performance figures of merit (e.g., speed of execution, energy consumption, bandwidth vs. latency, resource cost)",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Choosing and understanding workloads and representative benchmarks (e.g., SPEC, Dhrystone), and methods of collecting and analyzing performance figures of merit",
           "num": "1",
           "addressed": "No"
         },
         { "content": "CPI equation (Execution time = Nb. of instructions * cycles/instruction * time/cycle) as tool for understanding tradeoffs in the design of instruction sets, processor pipelines, and memory system organizations.",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Amdahl’s Law : the part of the computation that cannot be sped up limits the effect of the parts that can",
           "num": "3",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Explain how the components of system architecture contribute to improving its performance.",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Describe Amdahl’s law and discuss its limitations.",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Design and conduct a performance-oriented experiment, e.g., benchmark a parallel program with different data sets in order to iteratively improve its performance.",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Use software tools to profile and measure program performance.",
           "mastery": "-",
           "num": "4"
         }
      ]}
      ,
      {"unit_name": "Parallelism",
       "topics": [
         { "content": "Sequential vs. parallel processing",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Parallel programming (e.g., synchronization for producer-consumer for performance improvement) vs. concurrent programming (e.g., mutual exclusion/atomic operations for reactive programs)",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Request parallelism (e.g., web services) vs. Task parallelism (map-reduce processing)",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Client-Server/Web Services, Thread (Fork-Join), Pipelining",
           "num": "3",
           "addressed": "No"
         },
         { "content": "Multicore architectures and hardware support for synchronization",
           "num": "4",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "For a given program, distinguish between its sequential and parallel execution, and the performance implications thereof.",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Demonstrate on an execution time line that parallelism events and operations can take place simultaneously (i.e., at the same time). Explain how work can be performed in less elapsed time if this can be exploited.",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Explain other uses of parallelism, such as for reliability/redundancy of execution.",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Define the differences between the concepts of Instruction Parallelism, Data Parallelism, Thread Parallelism/Multitasking, Task/Request Parallelism.",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Write more than one parallel program (e.g., one simple parallel program in more than one parallel programming paradigm; a simple parallel program that manages shared resources through synchronization primitives; a simple parallel program that performs simultaneous operation on partitioned data through task parallel (e.g., parallel search terms; a simple parallel program that performs step-by-step pipeline processing through message passing).",
           "mastery": "-",
           "num": "5"
         },
         {"content": "Use performance tools to measure speed-up achieved by parallel programs in terms of both problem size and number of resources.",
           "mastery": "-",
           "num": "6"
         }
      ]}
      ,
      {"unit_name": "Virtualization_and_Isolation",
       "topics": [
         { "content": "Rationale for protection and predictable performance",
           "num": "0",
           "addressed": "No"
         },
         { "content": "",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Levels of indirection, illustrated by virtual memory for managing physical memory resources",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Methods for implementing virtual memory",
           "num": "3",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Explain why it is important to isolate and protect the execution of individual programs and environments that share common underlying resources, including the processor, memory, storage, and network access",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Describe how the concept of indirection can create the illusion of a dedicated machine and its resources even when physically shared among multiple programs and environments",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Measure the performance of two application instances running on separate virtual machines, and determine the effect of performance isolation",
           "mastery": "-",
           "num": "3"
         }
      ]}
]},
{"area_name": "OS",
  "units": [
      {"unit_name": "Overview_of_Operating_Systems",
       "topics": [
         { "content": "Role and purpose of the operating system",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Functionality of a typical operating system",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Mechanisms to support client-server models, hand-held devices",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Design issues (efficiency, robustness, flexibility, portability, security, compatibility)",
           "num": "3",
           "addressed": "No"
         },
         { "content": "Influences of security, networking, multimedia, windows",
           "num": "4",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Explain the objectives and functions of modern operating systems",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Analyze the tradeoffs inherent in operating system design",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Describe the functions of a contemporary operating system with respect to convenience, efficiency, and the ability to evolve",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Discuss networked, client-server, distributed operating systems and how they differ from single user operating systems",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Identify potential threats to operating systems and the security features design to guard against them",
           "mastery": "-",
           "num": "5"
         }
      ]}
      ,
      {"unit_name": "Real_Time_and_Embedded_Systems",
       "topics": [
         { "content": "Process and task scheduling",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Memory/disk management requirements in a real-time environment",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Failures, risks, and recovery",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Special concerns in real-time systems",
           "num": "3",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Describe what makes a system a real-time system",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Explain the presence of and describe the characteristics of latency in real-time systems",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Summarize special concerns that real-time systems present and how these concerns are addressed",
           "mastery": "-",
           "num": "3"
         }
      ]}
      ,
      {"unit_name": "File_Systems",
       "topics": [
         { "content": "Files: data, metadata, operations, organization, buffering, sequential, nonsequential",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Directories: contents and structure",
           "num": "1",
           "addressed": "No"
         },
         { "content": "File systems: partitioning, mount/unmount, virtual file systems",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Standard implementation techniques",
           "num": "3",
           "addressed": "No"
         },
         { "content": "Memory-mapped files",
           "num": "4",
           "addressed": "No"
         },
         { "content": "Special-purpose file systems",
           "num": "5",
           "addressed": "No"
         },
         { "content": "Naming, searching, access, backups",
           "num": "6",
           "addressed": "No"
         },
         { "content": "Journaling and log-structured file systems",
           "num": "7",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Summarize the full range of considerations in the design of file systems",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Compare and contrast different approaches to file organization, recognizing the strengths and weaknesses of each",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Summarize how hardware developments have led to changes in the priorities for the design and the management of file systems",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Summarize the use of journaling and how log-structured file systems enhance fault tolerance",
           "mastery": "-",
           "num": "4"
         }
      ]}
      ,
      {"unit_name": "Memory_Management",
       "topics": [
         { "content": "Review of physical memory and memory management hardware",
           "num": "0",
           "addressed": "No"
         },
         { "content": "",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Working sets and thrashing",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Caching",
           "num": "3",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Explain memory hierarchy and cost-performance trade-offs",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Summarize the principles of virtual memory as applied to caching and paging",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Evaluate the trade-offs in terms of memory size (main memory, cache memory, auxiliary memory) and processor speed",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Defend the different ways of allocating memory to tasks, citing the relative merits of each",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Describe the reason for and use of cache memory (performance and proximity, different dimension of how caches complicate isolation and VM abstraction)",
           "mastery": "-",
           "num": "5"
         },
         {"content": "Discuss the concept of thrashing, both in terms of the reasons it occurs and the techniques used to recognize and manage the problem",
           "mastery": "-",
           "num": "6"
         }
      ]}
      ,
      {"unit_name": "Concurrency",
       "topics": [
         { "content": "States and state diagrams (cross reference SF/State-State Transition-State Machines)",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Structures (ready list, process control blocks, and so forth)",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Dispatching and context switching",
           "num": "2",
           "addressed": "No"
         },
         { "content": "The role of interrupts",
           "num": "3",
           "addressed": "No"
         },
         { "content": "Managing atomic access to OS objects",
           "num": "4",
           "addressed": "No"
         },
         { "content": "Implementing synchronization primitives",
           "num": "5",
           "addressed": "No"
         },
         { "content": "Multiprocessor issues (spin-locks, reentrancy) (cross reference SF/Parallelism)",
           "num": "6",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Describe the need for concurrency within the framework of an operating system",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Demonstrate the potential run-time problems arising from the concurrent operation of many separate tasks",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Summarize the range of mechanisms that can be employed at the operating system level to realize concurrent systems and describe the benefits of each",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Explain the different states that a task may pass through and the data structures needed to support the management of many tasks",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Summarize techniques for achieving synchronization in an operating system (e.g., describe how to implement a semaphore using OS primitives)",
           "mastery": "-",
           "num": "5"
         },
         {"content": "Describe reasons for using interrupts, dispatching, and context switching to support concurrency in an operating system",
           "mastery": "-",
           "num": "6"
         },
         {"content": "Create state and transition diagrams for simple problem domains",
           "mastery": "-",
           "num": "7"
         }
      ]}
      ,
      {"unit_name": "Operating_System_Principles",
       "topics": [
         { "content": "Structuring methods (monolithic, layered, modular, micro-kernel models)",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Abstractions, processes, and resources",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Concepts of application program interfaces (APIs)",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Application needs and the evolution of hardware/software techniques",
           "num": "3",
           "addressed": "No"
         },
         { "content": "Device organization",
           "num": "4",
           "addressed": "No"
         },
         { "content": "Interrupts: methods and implementations",
           "num": "5",
           "addressed": "No"
         },
         { "content": "Concept of user/system state and protection, transition to kernel mode",
           "num": "6",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Explain the concept of a logical layer.",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Explain the benefits of building abstract layers in hierarchical fashion.",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Describe the value of APIs and middleware.",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Describe how computing resources are used by application software and managed by system software.",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Contrast kernel and user mode in an operating system.",
           "mastery": "-",
           "num": "5"
         },
         {"content": "Discuss the advantages and disadvantages of using interrupt processing.",
           "mastery": "-",
           "num": "6"
         },
         {"content": "Explain the use of a device list and driver I/O queue.",
           "mastery": "-",
           "num": "7"
         }
      ]}
      ,
      {"unit_name": "Scheduling_and_Dispatch",
       "topics": [
         { "content": "Preemptive and non-preemptive scheduling (cross reference SF/Resource Allocation and Scheduling, PD/Parallel Performance)",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Schedulers and policies (cross reference SF/Resource Allocation and Scheduling, PD/Parallel Performance)",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Processes and threads (cross reference SF/computational paradigms)",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Deadlines and real-time issues",
           "num": "3",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Compare and contrast the common algorithms used for both preemptive and non-preemptive scheduling of tasks in operating systems, such as priority, performance comparison, and fair-share schemes",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Describe relationships between scheduling algorithms and application domains",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Discuss the types of processor scheduling such as short-term, medium-term, long-term, and I/O",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Describe the difference between processes and threads",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Compare and contrast static and dynamic approaches to real-time scheduling",
           "mastery": "-",
           "num": "5"
         },
         {"content": "Discuss the need for preemption and deadline scheduling",
           "mastery": "-",
           "num": "6"
         },
         {"content": "Identify ways that the logic embodied in scheduling algorithms are applicable to other domains, such as disk I/O, network scheduling, project scheduling, and problems beyond computing",
           "mastery": "-",
           "num": "7"
         }
      ]}
]},
{"area_name": "AR",
  "units": [
      {"unit_name": "Performance_Enhancements",
       "topics": [
         { "content": "Superscalar architecture",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Branch prediction, Speculative execution, Out-of-order execution",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Prefetching",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Vector processors and GPUs",
           "num": "3",
           "addressed": "No"
         },
         { "content": "Hardware support for Multithreading",
           "num": "4",
           "addressed": "No"
         },
         { "content": "Scalability",
           "num": "5",
           "addressed": "No"
         },
         { "content": "Alternative architectures, such as VLIW/EPIC, and Accelerators and other kinds of Special-Purpose Processors",
           "num": "6",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Describe superscalar architectures and their advantages",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Explain the concept of branch prediction and its utility",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Characterize the costs and benefits of prefetching",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Explain speculative execution and identify the conditions that justify it",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Discuss the performance advantages that multithreading offered in an architecture along with the factors that make it difficult to derive maximum benefits from this approach",
           "mastery": "-",
           "num": "5"
         },
         {"content": "Describe the relevance of scalability to performance",
           "mastery": "-",
           "num": "6"
         }
      ]}
      ,
      {"unit_name": "Digital_Logic_and_Digital_Systems",
       "topics": [
         { "content": "Overview and history of computer architecture",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Combinational vs. sequential logic/Field programmable gate arrays as a fundamental combinational + sequential logic building block",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Multiple representations/layers of interpretation (hardware is just another layer)",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Computer-aided design tools that process hardware and architectural representations",
           "num": "3",
           "addressed": "No"
         },
         { "content": "Register transfer notation/Hardware Description Language (Verilog/VHDL)",
           "num": "4",
           "addressed": "No"
         },
         { "content": "Physical constraints (gate delays, fan-in, fan-out, energy/power)",
           "num": "5",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Describe the progression of computer technology components from vacuum tubes to VLSI, from mainframe computer architectures to the organization of warehouse-scale computers",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Comprehend the trend of modern computer architectures towards multi-core and that parallelism is inherent in all hardware systems",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Explain the implications of the 'power wall' in terms of further processor performance improvements and the drive towards harnessing parallelism",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Articulate that there are many equivalent representations of computer functionality, including logical expressions and gates, and be able to use mathematical expressions to describe the functions of simple combinational and sequential circuits",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Design the basic building blocks of a computer: arithmetic-logic unit (gate-level), registers (gate-level), central processing unit (register transfer-level), memory (register transfer-level)",
           "mastery": "-",
           "num": "5"
         },
         {"content": "Use CAD tools for capture, synthesis, and simulation to evaluate simple building blocks (e.g., arithmetic-logic unit, registers, movement between registers) of a simple computer design",
           "mastery": "-",
           "num": "6"
         },
         {"content": "Evaluate the functional and timing diagram behavior of a simple processor implemented at the logic circuit level",
           "mastery": "-",
           "num": "7"
         }
      ]}
      ,
      {"unit_name": "Machine",
       "topics": [
         { "content": "Bits, bytes, and words",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Numeric data representation and number bases [Not addressed]",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Fixed- and floating-point systems",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Signed and twos-complement representations",
           "num": "3",
           "addressed": "No"
         },
         { "content": "Representation of non-numeric data (character codes, graphical data)",
           "num": "4",
           "addressed": "No"
         },
         { "content": "Representation of records and arrays",
           "num": "5",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Explain why everything is data, including instructions, in computers",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Explain the reasons for using alternative formats to represent numerical data",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Describe how negative integers are stored in sign-magnitude and twos-complement representations",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Explain how fixed-length number representations affect accuracy and precision",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Describe the internal representation of non-numeric data, such as characters, strings, records, and arrays",
           "mastery": "-",
           "num": "5"
         },
         {"content": "Convert numerical data from one format to another",
           "mastery": "-",
           "num": "6"
         },
         {"content": "Write simple programs at the assembly/machine level for string processing and manipulation",
           "mastery": "-",
           "num": "7"
         }
      ]}
      ,
      {"unit_name": "Multiprocessing_and_Alternative_Architectures",
       "topics": [
         { "content": "Power Law",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Example SIMD and MIMD instruction sets and architectures",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Interconnection networks (hypercube, shuffle-exchange, mesh, crossbar)",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Shared multiprocessor memory systems and memory consistency",
           "num": "3",
           "addressed": "No"
         },
         { "content": "Multiprocessor cache coherence",
           "num": "4",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Discuss the concept of parallel processing beyond the classical von Neumann model",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Describe alternative architectures such as SIMD and MIMD",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Explain the concept of interconnection networks and characterize different approaches",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Discuss the special concerns that multiprocessing systems present with respect to memory management and describe how these are addressed",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Describe the differences between memory backplane, processor memory interconnect, and remote memory via networks",
           "mastery": "-",
           "num": "5"
         }
      ]}
      ,
      {"unit_name": "Interfacing_and_Communication",
       "topics": [
         { "content": "I/O fundamentals: handshaking, buffering, programmed I/O, interrupt-driven I/O",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Interrupt structures: vectored and prioritized, interrupt acknowledgment",
           "num": "1",
           "addressed": "No"
         },
         { "content": "External storage, physical organization, and drives",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Buses: bus protocols, arbitration, direct-memory access (DMA)",
           "num": "3",
           "addressed": "No"
         },
         { "content": "Introduction to networks: networks as another layer of access hierarchy",
           "num": "4",
           "addressed": "No"
         },
         { "content": "Multimedia support",
           "num": "5",
           "addressed": "No"
         },
         { "content": "RAID architectures",
           "num": "6",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Explain how interrupts are used to implement I/O control and data transfers",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Identify various types of buses in a computer system",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Describe data access from a magnetic disk drive",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Compare common network organizations, such as ethernet/bus, ring, switched vs. routed",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Identify interfaces needed for multimedia support, from storage, through network, to memory and display",
           "mastery": "-",
           "num": "5"
         },
         {"content": "Describe the advantages and limitations of RAID architectures",
           "mastery": "-",
           "num": "6"
         }
      ]}
      ,
      {"unit_name": "Functional_Organization",
       "topics": [
         { "content": "Implementation of simple datapaths, including instruction pipelining, hazard detection and resolution",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Control unit: hardwired realization vs. microprogrammed realization",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Instruction pipelining",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Introduction to instruction-level parallelism (ILP)",
           "num": "3",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Compare alternative implementation of datapaths",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Discuss the concept of control points and the generation of control signals using hardwired or microprogrammed implementations",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Explain basic instruction level parallelism using pipelining and the major hazards that may occur",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Design and implement a complete processor, including datapath and control",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Determine, for a given processor and memory system implementation, the average cycles per instruction",
           "mastery": "-",
           "num": "5"
         }
      ]}
      ,
      {"unit_name": "Memory_System_Organization_and_Architecture",
       "topics": [
         { "content": "Storage systems and their technology",
           "num": "0",
           "addressed": "No"
         },
         { "content": "",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Memory hierarchy",
           "num": "2",
           "subtopics": [         { "content": "importance of temporal and spatial locality",
           "num": "20",
           "addressed": "No"
         }],
           "addressed": "No"
         },
         { "content": "Main memory organization and operations",
           "num": "3",
           "addressed": "No"
         },
         { "content": "Latency, cycle time, bandwidth, and interleaving",
           "num": "4",
           "addressed": "No"
         },
         { "content": "Cache memories (address mapping, block size, replacement and store policy)",
           "num": "5",
           "addressed": "No"
         },
         { "content": "Multiprocessor cache consistency/Using the memory system for inter-core synchronization/atomic memory operations",
           "num": "6",
           "addressed": "No"
         },
         { "content": "Virtual memory (page table, TLB)",
           "num": "7",
           "addressed": "No"
         },
         { "content": "Fault handling and reliability",
           "num": "8",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Identify the main types of memory technology",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Explain the effect of memory latency on running time",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Describe how the use of memory hierarchy (cache, virtual memory) is used to reduce the effective memory latency",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Describe the principles of memory management",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Explain the workings of a system with virtual memory management",
           "mastery": "-",
           "num": "5"
         },
         {"content": "Compute Average Memory Access Time under a variety of memory system configurations and workload assumptions",
           "mastery": "-",
           "num": "6"
         }
      ]}
      ,
      {"unit_name": "Assembly_Level_Machine_Organization",
       "topics": [
         { "content": "Basic organization of the von Neumann machine",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Control unit; instruction fetch, decode, and execution",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Instruction sets and types (data manipulation, control, I/O)",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Assembly/machine language programming",
           "num": "3",
           "addressed": "No"
         },
         { "content": "Instruction formats",
           "num": "4",
           "addressed": "No"
         },
         { "content": "Addressing modes",
           "num": "5",
           "addressed": "No"
         },
         { "content": "Subroutine call and return mechanisms (xref PL/Language Translation and Execution)",
           "num": "6",
           "addressed": "No"
         },
         { "content": "I/O and interrupts",
           "num": "7",
           "addressed": "No"
         },
         { "content": "Heap vs. Static vs. Stack vs. Code segments",
           "num": "8",
           "addressed": "No"
         },
         { "content": "Shared memory multiprocessors/multicore organization",
           "num": "9",
           "addressed": "No"
         },
         { "content": "Introduction to SIMD vs. MIMD and the Flynn Taxonomy",
           "num": "10",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Explain the organization of the classical von Neumann machine and its major functional units",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Describe how an instruction is executed in a classical von Neumann machine, with extensions for threads, multiprocessor synchronization, and SIMD execution",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Describe instruction level parallelism and hazards, and how they are managed in typical processor pipelines",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Summarize how instructions are represented at both the machine level and in the context of a symbolic assembler",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Demonstrate how to map between high-level language patterns into assembly/machine language notations",
           "mastery": "-",
           "num": "5"
         },
         {"content": "Explain different instruction formats, such as addresses per instruction and variable length vs. fixed length formats",
           "mastery": "-",
           "num": "6"
         },
         {"content": "Explain how subroutine calls are handled at the assembly level",
           "mastery": "-",
           "num": "7"
         },
         {"content": "Explain the basic concepts of interrupts and I/O operations",
           "mastery": "-",
           "num": "8"
         },
         {"content": "Write simple assembly language program segments",
           "mastery": "-",
           "num": "9"
         },
         {"content": "Show how fundamental high-level programming constructs are implemented at the machine-language level",
           "mastery": "-",
           "num": "10"
         }
      ]}
]},
{"area_name": "PL",
  "units": [
      {"unit_name": "Code_Generation",
       "topics": [
         { "content": "Procedure calls and method dispatching",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Separate compilation; linking",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Instruction selection",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Instruction scheduling",
           "num": "3",
           "addressed": "No"
         },
         { "content": "Register allocation",
           "num": "4",
           "addressed": "No"
         },
         { "content": "Peephole optimization",
           "num": "5",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Identify all essential steps for automatically converting source code into assembly or other low-level languages",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Generate the low-level code for calling functions/methods in modern languages",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Discuss why separate compilation requires uniform calling conventions",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Discuss why separate compilation limits optimization because of unknown effects of calls",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Discuss opportunities for optimization introduced by naive translation and approaches for achieving optimization, such as instruction selection, instruction scheduling, register allocation, and peephole optimization",
           "mastery": "-",
           "num": "5"
         }
      ]}
]},
{"area_name": "SE",
  "units": [
      {"unit_name": "Tools_and_Environments",
       "topics": [
         { "content": "Software configuration management and version control ; release management",
           "num": "0",
           "addressed": "No"
         },
         { "content": "Requirements analysis and design modeling tools",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Testing tools including static and dynamic analysis tools",
           "num": "2",
           "addressed": "No"
         },
         { "content": "Programming environments that automate parts of program construction processes (e.g., automated builds)",
           "num": "3",
           "subtopics": [         { "content": "Continuous integration",
           "num": "30",
           "addressed": "No"
         }],
           "addressed": "No"
         },
         { "content": "Tool integration concepts and mechanisms",
           "num": "4",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Describe the difference between centralized and distributed software configuration management",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Identify configuration items and use a source code control tool in a small team-based project",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Describe the issues that are important in selecting a set of tools for the development of a particular software system, including tools for requirements tracking, design modeling, implementation, build automation, and testing",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Demonstrate the capability to use software tools in support of the development of a software product of medium size",
           "mastery": "-",
           "num": "4"
         }
      ]}
      ,
      {"unit_name": "Software_Project_Management",
       "topics": [
         { "content": "Team participation",
           "num": "0",
           "subtopics": [         { "content": "Team processes including responsibilities for tasks, meeting structure, and work schedule o Roles and responsibilities in a software team",
           "num": "0",
           "addressed": "No"
         }, 
         { "content": "Team conflict resolution",
           "num": "1",
           "addressed": "No"
         }, 
         { "content": "Risks associated with virtual teams (communication, perception, structure)",
           "num": "2",
           "addressed": "No"
         }],
           "addressed": "No"
         },
         { "content": "Effort Estimation (at the personal level)",
           "num": "1",
           "addressed": "No"
         },
         { "content": "Risk (cross reference IAS/Secure Software Engineering)",
           "num": "2",
           "subtopics": [         { "content": "The role of risk in the lifecycle",
           "num": "20",
           "addressed": "No"
         }, 
         { "content": "Risk categories including security, safety, market, financial, technology, people, quality, structure and process",
           "num": "21",
           "addressed": "No"
         }],
           "addressed": "No"
         },
         { "content": "Team management",
           "num": "3",
           "subtopics": [         { "content": "Team organization and decision-making",
           "num": "30",
           "addressed": "No"
         }, 
         { "content": "Role identification and assignment",
           "num": "31",
           "addressed": "No"
         }, 
         { "content": "Individual and team performance assessment",
           "num": "32",
           "addressed": "No"
         }],
           "addressed": "No"
         },
         { "content": "Project management",
           "num": "4",
           "subtopics": [         { "content": "Scheduling and tracking",
           "num": "40",
           "addressed": "No"
         }, 
         { "content": "Project management tools",
           "num": "41",
           "addressed": "No"
         }, 
         { "content": "Cost/benefit analysis",
           "num": "42",
           "addressed": "No"
         }],
           "addressed": "No"
         },
         { "content": "Software measurement and estimation techniques",
           "num": "5",
           "addressed": "No"
         },
         { "content": "Software quality assurance and the role of measurements",
           "num": "6",
           "addressed": "No"
         },
         { "content": "Risk",
           "num": "7",
           "subtopics": [         { "content": "Risk identification and management",
           "num": "70",
           "addressed": "No"
         }, 
         { "content": "Risk analysis and evaluation",
           "num": "71",
           "addressed": "No"
         }, 
         { "content": "Risk tolerance (e.g., risk-adverse, risk-neutral, risk-seeking)",
           "num": "72",
           "addressed": "No"
         }, 
         { "content": "Risk planning",
           "num": "73",
           "addressed": "No"
         }],
           "addressed": "No"
         },
         { "content": "System-wide approach to risk including hazards associated with tools",
           "num": "8",
           "addressed": "No"
         }
      ],
      "skills": [
         {"content": "Discuss common behaviors that contribute to the effective functioning of a team.",
           "mastery": "-",
           "num": "1"
         },
         {"content": "Create and follow an agenda for a team meeting",
           "mastery": "-",
           "num": "2"
         },
         {"content": "Identify and justify necessary roles in a software development team.",
           "mastery": "-",
           "num": "3"
         },
         {"content": "Understand the sources, hazards, and potential benefits of team conflict.",
           "mastery": "-",
           "num": "4"
         },
         {"content": "Apply a conflict resolution strategy in a team setting.",
           "mastery": "-",
           "num": "5"
         },
         {"content": "Use an ad hoc method to estimate software development effort (e.g., time) and compare to actual effort required.",
           "mastery": "-",
           "num": "6"
         },
         {"content": "List several examples of software risks.",
           "mastery": "-",
           "num": "7"
         },
         {"content": "Describe the impact of risk in a software development lifecycle.",
           "mastery": "-",
           "num": "8"
         },
         {"content": "Describe different categories of risk in software systems.",
           "mastery": "-",
           "num": "9"
         },
         {"content": "Demonstrate through involvement in a team project the central elements of team building and team management.",
           "mastery": "-",
           "num": "10"
         },
         {"content": "Describe how the choice of process model affects team organizational structures and decision-making processes.",
           "mastery": "-",
           "num": "11"
         },
         {"content": "Create a team by identifying appropriate roles and assigning roles to team members.",
           "mastery": "-",
           "num": "12"
         },
         {"content": "Assess and provide feedback to teams and individuals on their performance in a team setting.",
           "mastery": "-",
           "num": "13"
         },
         {"content": "Using a particular software process, describe the aspects of a project that need to be planned and monitored, (e.g., estimates of size and effort, a schedule, resource allocation, configuration control, change management, and project risk identification and management).",
           "mastery": "-",
           "num": "14"
         },
         {"content": "Track the progress of some stage in a project using appropriate project metrics.",
           "mastery": "-",
           "num": "15"
         },
         {"content": "Compare simple software size and cost estimation techniques.",
           "mastery": "-",
           "num": "16"
         },
         {"content": "Use a project management tool to assist in the assignment and tracking of tasks in a software development project.",
           "mastery": "-",
           "num": "17"
         },
         {"content": "Describe the impact of risk tolerance on the software development process.",
           "mastery": "-",
           "num": "18"
         },
         {"content": "Identify risks and describe approaches to managing risk (avoidance, acceptance, transference, mitigation), and characterize the strengths and shortcomings of each.",
           "mastery": "-",
           "num": "19"
         },
         {"content": "Explain how risk affects decisions in the software development process.",
           "mastery": "-",
           "num": "20"
         },
         {"content": "Identify security risks for a software system.",
           "mastery": "-",
           "num": "21"
         },
         {"content": "Demonstrate a systematic approach to the task of identifying hazards and risks in a particular situation.",
           "mastery": "-",
           "num": "22"
         },
         {"content": "Apply the basic principles of risk management in a variety of simple scenarios including a security situation",
           "mastery": "-",
           "num": "23"
         },
         {"content": "Conduct a cost/benefit analysis for a risk mitigation approach.",
           "mastery": "-",
           "num": "24"
         },
         {"content": "Identify and analyze some of the risks for an entire system that arise from aspects other than the software.",
           "mastery": "-",
           "num": "25"
         }
      ]}
]}]
